{"ast":null,"code":"function makeNode(ch) {\n  this.ch = ch;\n  this.isTerminal = false;\n  this.map = {};\n  this.words = [];\n}\n\nconst add = (str, i, root) => {\n  if (i === str.length) {\n    root.isTerminal = true;\n    return;\n  }\n\n  if (!root.map[str[i]]) root.map[str[i]] = new makeNode(str[i]);\n  root.words.push(str);\n  add(str, i + 1, root.map(str[i]));\n};\n\nconst search = (str, i, root) => {\n  if (i === str.length) {\n    return root.words;\n  }\n\n  if (!root.map[str[i]]) {\n    return [];\n  }\n\n  return search(str, i + 1, root.map[str[i]]);\n};\n\nexport { search, add, makeNode };","map":{"version":3,"sources":["C:/Users/PRATHAM/Desktop/StockDashBoard/dashboard/src/trie.js"],"names":["makeNode","ch","isTerminal","map","words","add","str","i","root","length","push","search"],"mappings":"AAGA,SAASA,QAAT,CAAkBC,EAAlB,EACA;AACA,OAAKA,EAAL,GAAQA,EAAR;AACA,OAAKC,UAAL,GAAgB,KAAhB;AACA,OAAKC,GAAL,GAAS,EAAT;AACA,OAAKC,KAAL,GAAW,EAAX;AACC;;AACD,MAAMC,GAAG,GAAC,CAACC,GAAD,EAAKC,CAAL,EAAOC,IAAP,KAAc;AAErB,MAAGD,CAAC,KAAGD,GAAG,CAACG,MAAX,EACA;AACID,IAAAA,IAAI,CAACN,UAAL,GAAgB,IAAhB;AACA;AACH;;AAED,MAAG,CAACM,IAAI,CAACL,GAAL,CAASG,GAAG,CAACC,CAAD,CAAZ,CAAJ,EACAC,IAAI,CAACL,GAAL,CAASG,GAAG,CAACC,CAAD,CAAZ,IAAiB,IAAIP,QAAJ,CAAaM,GAAG,CAACC,CAAD,CAAhB,CAAjB;AAEAC,EAAAA,IAAI,CAACJ,KAAL,CAAWM,IAAX,CAAgBJ,GAAhB;AACAD,EAAAA,GAAG,CAACC,GAAD,EAAKC,CAAC,GAAC,CAAP,EAASC,IAAI,CAACL,GAAL,CAASG,GAAG,CAACC,CAAD,CAAZ,CAAT,CAAH;AACF,CAbD;;AAeA,MAAMI,MAAM,GAAC,CAACL,GAAD,EAAKC,CAAL,EAAOC,IAAP,KAAc;AACvB,MAAGD,CAAC,KAAGD,GAAG,CAACG,MAAX,EACA;AACG,WAAOD,IAAI,CAACJ,KAAZ;AACF;;AACD,MAAG,CAACI,IAAI,CAACL,GAAL,CAASG,GAAG,CAACC,CAAD,CAAZ,CAAJ,EACA;AACI,WAAO,EAAP;AACH;;AACD,SAAOI,MAAM,CAACL,GAAD,EAAKC,CAAC,GAAC,CAAP,EAASC,IAAI,CAACL,GAAL,CAASG,GAAG,CAACC,CAAD,CAAZ,CAAT,CAAb;AAEH,CAXD;;AAYA,SAAQI,MAAR,EAAeN,GAAf,EAAmBL,QAAnB","sourcesContent":["\r\n\r\n\r\nfunction makeNode(ch)\r\n{\r\nthis.ch=ch;\r\nthis.isTerminal=false;\r\nthis.map={};\r\nthis.words=[];\r\n}\r\nconst add=(str,i,root)=>{\r\n\r\n   if(i===str.length)\r\n   {\r\n       root.isTerminal=true;\r\n       return;\r\n   }\r\n\r\n   if(!root.map[str[i]])\r\n   root.map[str[i]]=new makeNode(str[i]);\r\n\r\n   root.words.push(str);\r\n   add(str,i+1,root.map(str[i]));\r\n}\r\n\r\nconst search=(str,i,root)=>{\r\n    if(i===str.length)\r\n    {\r\n       return root.words;\r\n    }\r\n    if(!root.map[str[i]])\r\n    {\r\n        return [];\r\n    }\r\n    return search(str,i+1,root.map[str[i]])\r\n\r\n}\r\nexport {search,add,makeNode};"]},"metadata":{},"sourceType":"module"}